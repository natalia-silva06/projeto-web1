<!DOCTYPE html>
<html lang="pt-br">

<head>
    <title>Cadastrar Pessoa</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="style7.css">
    <style>
        h1 {
            color: rgb(19, 18, 18);
        }

        body {
            background-color: rgb(135, 103, 233);
        }
    </style>
</head>

<body>

    <div class="container mt-5">
        <div class="alert alert-success alert-dismissible">
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            <strong>{{pessoa.result}}</strong> cadastrado(a) com sucesso!
        </div>
        <div class="alert alert-danger alert-dismissible">
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            <strong>{{erro}}</strong> não foi possível concluir o cadastro.
        </div>

        <h1>Cadastro de Conta Corrente</h1>
        <br>

        <form action="/cadastrarConta" method="post">
            <div class="row">
                <input type="hidden" id="idUsuario" value="{{idPessoa}}" name="">
                <div class="col-6">
                    <label class="form-label" for="nomeConta">Nome da Conta</label>
                    <input class="form-control" type="text" id="nomeConta" name="nomeConta"
                        placeholder="Nome da Conta">
                </div>
                <div class="col-6">
                    <label class="form-label" for="saldo">Saldo</label>
                    <input class="form-control" type="number" id="saldo" name="saldo">
                </div>
            </div>
            <div class="d-grid mt-3">
                <button type="submit" class="btn btn-primary btn-block">Cadastrar Conta</button>
            </div>
        </form>
    </div>

</body>

</html>



<!DOCTYPE html>
<html lang="pt-br">

<head>
    <title>Template</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="style.css">
</head>

<body>

    <div class="container">
        <form action="/cadastroView" method="post">
            <input type="hidden" value="{{pessoa.idPessoa}}" id="idPessoa" name="idPessoa">
            <button type="submit" >+</button>
        </form>
        <div>
        {{#contas}}
        <form action="/acessarConta" method="post">
            <input type="hidden" value="{{idConta}}" id="idConta" name="idConta">
            <h1>{{nomeConta}}</h1>
            <h3>{{numeroConta}}</h3>
            <button type="submit" >Acessar conta corrente</button>
        </form>
        {{/contas}}
        </div>
        
        
    </div>

</body>

</html>



const Sequelize = require('sequelize');
const database = require('../db');
 
const Pessoa = database.define('pessoa', {
    idPessoa: {
        type: Sequelize.INTEGER,
        autoIncrement: true,
        allowNull: false,
        primaryKey: true
    },
    nomePessoa: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    data_nascimento: {
        type: Sequelize.DATE,
        allowNull: false,
    },
    cpf: {
        type: Sequelize.STRING,
        allowNull: false,
        unique: true,
    },
    telefone: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    endereco: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    cep: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    email: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    senha: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
 
module.exports = Pessoa;




const Sequelize = require('sequelize');
const database = require('../db');
 
const ContaCorrente = database.define('conta_corrente', {
    idConta: {
        type: Sequelize.INTEGER,
        autoIncrement: true,
        allowNull: false,
        primaryKey: true
    },
    fk_idUsuario: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
            model: 'usuario', 
            key: 'idUsuario' 
        }
    },
    numeroConta: {
        type: Sequelize.STRING,
        allowNull: false,
        unique: true,
    },
    nomeConta: {
        type: Sequelize.STRING,
        allowNull: false,
        
    },
    dataAbertura: {
        type: Sequelize.DATE,
        allowNull: false,
    },
    saldo: {
        type: Sequelize.DOUBLE,
        allowNull: false,
    },
    
});
 
module.exports = ContaCorrente;





const Pessoa = require('../models/pessoa')

function cadastrarView(req, res){
    res.render("pessoa/cadastrar.html", {});
}

function cadastrarPessoa(req, res){
    let pessoa = {
        nomeCompleto: req.body.nomeCompleto,
        data_nascimento: req.body.data_nascimento,
        cpf: req.body.cpf,
        endereco: req.body.endereco,
        telefone: req.body.telefone,
        cep: req.body.cep,
        email: req.body.email,
        senha: req.body.senha,
    }
    
    Pessoa.create(pessoa).then((result)=>{
        res.render("pessoa/cadastrar.html", {pessoa});
    }).catch((err) => {
        console.log(err)
        let erro = err
        res.render("pessoa/cadastrar.html", {erro});
    })
}

function listarView(req, res){

    let sucesso_excluir = req.query.sucesso_excluir
    let erro_excluir = req.query.erro_excluir
    

    Pessoa.findAll().then((pessoas)=>{
        res.render("pessoa/listar.html", {pessoas, sucesso_excluir, erro_excluir});
    }).catch((err) => {
        console.log(err)
        let erro = err
        res.render("pessoa/listar.html", {erro});
    })
}

function editarView(req, res){
    let id = req.params.id
    let pessoa;
    Pessoa.findByPk(id).then(function(pessoa){
        res.render("pessoa/editar.html", {pessoa});
    })
}

function editarPessoa(req, res) {
    let pessoa = {
        nomeCompleto: req.body.nomeCompleto,
        data_nascimento: req.body.data_nascimento,
        cpf: req.body.cpf,
        endereco: req.body.endereco,
        telefone: req.body.telefone,
        cep: req.body.cep,
        email: req.body.email,
        senha: req.body.senha,
    }
    Pessoa.update(
      pessoa,
      {
        where: {
          id: req.body.id,
        },
      }
    ).then(function (sucesso) {
        res.render("pessoa/editar.html", {pessoa, sucesso});
    })
    .catch(function (erro) {
        res.render("pessoa/editar.html", {pessoa, erro})
    });

}

function excluirPessoa(req, res) {
   
    Pessoa.destroy(
      {
        where: {
          id: req.body.id,
        },
      }
    ).then(function (sucesso) {
        res.redirect("/pessoa/listar?sucesso_excluir=1");
    })
    .catch(function (erro) {
        res.redirect("/pessoa/listar?erro_excluir=1")
    });

}

module.exports =  {
    cadastrarView,
    cadastrarPessoa,
    listarView,
    editarView,
    editarPessoa,
    excluirPessoa,
};



<!DOCTYPE html>
<html lang="pt-br">

<head>
    <title>Conta-Corrente</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="style5.css">
    <style>
        h1 {
            color: rgb(238, 243, 242);
        }

        body {
            background-color: rgb(59, 92, 226);
        }
    </style>
</head>

<body>
    <div class="container mt-5">

        <h1>Conta-Corrente</h1>
        <br>
        <div class="row">
            <div class="col-3">
                <label class="form-label" for="valor">Valor Conta Corrente:</label>
                <input class="form-control" type="number" id="saldo" name="saldo">
            </div>
        </div>
        <br>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Nome Completo</th>
                    <th scope="col">Conta</th>
                    <th scope="col">Tipo de Conta</th>
                    <th scope="col">Data de Movimentação</th>
                    <th scope="col">Valor</th>
                </tr>
            </thead>
            {{contaCorrente}}
            <tbody>
                <tr>
                    <th scope="row">1</th>
                    <td>{{nomeCompleto}}</td>
                    <td>{{conta}}</td>
                    <td>{{tipo}}</td>
                    <td>{{data_movimentacao}}</td>
                    <td>{{valor}}</td>
                </tr>
                {{/contaCorrente}}
            </tbody>
        </table>


    </div>



</body>

</html>





const express = require('express')
const mustacheExpress = require('mustache-express')
const session = require('express-session')
const db = require('./src/db')

const app = express()

app.engine('html', mustacheExpress())
app.set('view engine', 'html')
app.set('views', __dirname + '/src/views')

app.use(express.urlencoded({extended: true}))
app.use(express.json());
app.use(express.static(__dirname + '/public'));

app.use(session({
    secret: 'secret-token',
    name: 'sessionId',  
    resave: false,
    saveUninitialized: false
}))

// Define as rotas da aplicação (declaradas na pasta /src/routes/)
app.use('/', require('./src/routes/pessoaRoutes'));
app.use('/', require('./src/routes/indexRoutes'));
app.use('/', require('./src/routes/autenticacaoRoutes'));

app.use('/', require('./src/routes/api/pessoaAPIRoutes'));

db.sync(() => console.log(`Banco de dados conectado`));

const app_port = 8000
app.listen(app_port, function () {
    console.log('app rodando na porta ' + app_port)
})


{
  "name": "app_template",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2",
    "express-session": "^1.17.3",
    "mustache-express": "^1.3.2",
    "mysql2": "^3.4.3",
    "sequelize": "^6.31.1",
    "sqlite3": "^5.1.6"
  }
}



const Pessoa = require('../models/pessoa')
const Contas = require('../models/contaCorrente')
const Usuario = require('../models/usuario')

function loginView(req, res){
    pessoa = req.session.pessoa
    res.render("login.html", {pessoa});
}

async function autenticar(req, res) {
    const pessoa = await Pessoa.findOne({ where: { email: req.body.email, senha: req.body.senha} });
    const usuario = Usuario.findOne({ where: { fk_idPessoa: pessoa.idPessoa} });
    const contas = Contas.findAll({ where: { fk_idUsuario: usuario.idUsuario } });
    if (pessoa !== null) {    
        req.session.autorizado = true
        req.session.pessoa = pessoa
        req.session.conta = contas
        res.redirect('/')
    } else {
        let erro_autenticacao = true
        res.render('login.html', {erro_autenticacao})
    }
}

function sair(req, res) {
    req.session.destroy(function(err) {
        console.log('Usuário desautorizado')
     })
     let sucesso_saida = true
     res.render('login.html', {sucesso_saida})
}

function verificarAutenticacao(req, res, next) {
    if (req.session.autorizado){
        console.log('Usuário autorizado')
        next()
    }
    else{
        console.log('Usuário NÃO autorizado')
        res.redirect('/login')
    }
}

module.exports =  {
    loginView,
    autenticar,
    verificarAutenticacao,
    sair
};





